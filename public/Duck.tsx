/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 duck.gltf -T -t 
Files: duck.gltf [58.07KB] > C:\Development Sandbox\GIT Working Folders\React Three Fiber\floating-ducks\public\duck-transformed.glb [9.44KB] (84%)
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Cube002: THREE.Mesh;
    Cube002_1: THREE.Mesh;
    Cube002_2: THREE.Mesh;
    Cube002_3: THREE.Mesh;
  };
  materials: {
    ["Rubber Duck Yellow"]: THREE.MeshStandardMaterial;
    ["Rubber Duck Orange"]: THREE.MeshStandardMaterial;
    ["Rubber Duck White"]: THREE.MeshStandardMaterial;
    ["Rubber Duck Black"]: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/duck-transformed.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Cube002.geometry}
        material={materials["Rubber Duck Yellow"]}
      />
      <mesh
        geometry={nodes.Cube002_1.geometry}
        material={materials["Rubber Duck Orange"]}
      />
      <mesh
        geometry={nodes.Cube002_2.geometry}
        material={materials["Rubber Duck White"]}
      />
      <mesh
        geometry={nodes.Cube002_3.geometry}
        material={materials["Rubber Duck Black"]}
      />
    </group>
  );
}

useGLTF.preload("/duck-transformed.glb");
